{
    "contents" : "# \n# march.nbLLData <- function(rt,k,order){\n# \tones(1,k^order)%*%rt%*%ones(k,1);\n# }\n\nmarch.h.ones <- function(l,c){\n  matrix(data=1,nrow=l,ncol=c);\n}\n\n\n#\n# Generate a sequence of number from \"from\" to \"to\", incremented by \"by\".\n# This function is basically the same as standard seq, except it retun\n# a null sequence (numeric(0)) whenever from is less than to and by is positive\n# or when from is more than to and by is negative.\n# The function seq return an error in these cases.\n#\n# Parameters:\n#\t  from: the sequence start.\n# \tto: the sequence end.\n#\t  by: the sequence step.\n#\n# Returns :\n#\ta sequence from \"from\" to \"to\", using step \"by\", if possible, numeric(0) otherwise.\n#\nmarch.h.seq <- function( from, to, by=1 ){\n  if( by>0 ){\n    if( to<from ){ numeric(0) }\n    else{ seq(from,to,by) }\n  }\n  else if( from<to ){ numeric(0) }\n  else{ seq(from,to,by) }\n}\n\n# Convert a parameter from real to integer type and warn the user if during the process something was lost.\nmarch.h.paramAsInteger <- function( p ){\n  pInt <- as.integer(p)\n  if( pInt!=p ){\n    warning(sprintf(\"%s parameter has been truncated to %d, as it should be an integer\\n\",toString(substitute(p)),pInt),call.=FALSE)\n  }\n  pInt\n}\n\n# Allow to print a matrix without row and col names.\nmarch.h.printMatrix <- function( m ){\n  write.table(format(m,justify=\"right\"),row.names=F,col.names=F,quote=F)\n}\n\n#' Save a march.Model\n#' \n#' Save a march.Model into a file pointed by \\emph{filename}. It fails if the file already exists unless force has been\n#' set to TRUE.\n#' \n#' @param filename a path to the file where to write the model (absolute or relative to the current wd).\n#' @param object the model to write.\n#' @param force if TRUE and if the file pointed by the filename path already exists, overwrite it.\n#' \n#'  @return invisible TRUE if the model has been written into the file pointed by filename, invisible FALSE otherwise.\n#'\n#' @export\nmarch.write <- function(filename,object,force=FALSE){\n  status <- FALSE\n  c <- class(object)[1]\n  if( c==\"march.Indep\"){ status <- TRUE}\n  if( c==\"march.Mc\"){ status <- TRUE}\n  if( c==\"march.Mtd\"){ status <- TRUE}\n  if( c==\"march.Dcmm\"){ status <- TRUE}\n  \n  if( status ){\n    if( file.exists(filename) ){\n      if( force==FALSE ){\n        warning(sprintf(\"This file already exists (\\\"%s\\\"), use force=TRUE to overwrite.\",filename),call.=FALSE)\n        return(invisible(FALSE))\n      }\n      else{\n        warning(sprintf(\"This file already exists (\\\"%s\\\"), but will be overwritten.\",filename),call.=FALSE)\n      }\n    }\n    \n    saveRDS(object,filename)\n    return(invisible(TRUE))\n  }\n  else{\n    warning(toString(sprintf(\"%s should be a march.Model\",substitute(p))))\n    return(invisible(FALSE))\n  }\n}\n\n#' Load a march.Model.\n#' \n#' Load a march.Model from a file pointed by \\emph{filename}.\n#' \n#' @param filename the path where load the mode\n#' @return the march.Model contained into the file pointed by filename if it exists and contains a valid model.\n#' \n#' @export\nmarch.read <- function( filename ){\n  if( file.exists(filename) ){\n    object <- readRDS(filename)\n    status <- FALSE\n    c <- class(object)[1]\n    if( c==\"march.Indep\"){ status <- TRUE}\n    if( c==\"march.Mc\"){ status <- TRUE}\n    if( c==\"march.Mtd\"){ status <- TRUE}\n    if( c==\"march.Dcmm\"){ status <- TRUE}\n    \n    if( status==FALSE ){\n      warning(sprintf(\"File (\\\"%s\\\") does not contain a march.Model object.\",filename),call.=FALSE)\n      return(NULL);\n    }\n    return(object)\n  }\n  else{\n    warning(sprintf(\"File (\\\"%s\\\") does not exist.\",filename),call.=FALSE)\n    return(NULL);\n  }\n}\n\n# Label rows and columns of a MC matrix (RT or RC), \n# with variable states (dictionary index), in order to print it.\nmarch.h.mc.printableMatrix <- function(s,order,K){\n  colnames(s) <- 1:K\n  rn <- array(0,c(dim(s)[1]))\n  for( i in 1:dim(s)[1]){\n    n <- \"\"\n    tmp <- i-1\n    for( j in 1:order ){\n      v <- tmp%%K\n      tmp <- floor(tmp/K)\n      n <- paste(n,as.character(v+1))\n    }\n    rn[i] <- n\n  }\n  rownames(s) <- paste(rn,\":\")\n  s\n}",
    "created" : 1400311813304.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "798892856",
    "id" : "63C68935",
    "lastKnownWriteTime" : 1392890853,
    "path" : "~/Desktop/Bur/mc-RC3/mc/R/march.tools.R",
    "project_path" : "R/march.tools.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}