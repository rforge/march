library("march", lib.loc="~/R/win-library/3.5")
library(march)
march.thompson,march.Dcmm,numeric-method`
march.dcmm.thompson
?march.dcmm.construct
HMM <- march.dcmm.construct(sleep,orderHC=1,orderVC=0,M=3,gen=1,popSize=1,iterBw=10,stopBw=0.0001)
march.thompson(HMM)
?march.thompson
march.thompson(HMM,0.05)
march.thompson()
setwd("~/")
data <- read.table("dataAndre.txt")
data <- as.matrix(data)
datat <- matrix(0,23,42)
for(i in 1:23){
datat[i,]<-data[14*(i-1)+1,]
}
covariates <- array(0,c(23,42,13))
for(j in 1:13){
for(i in 1:23){
covariates[i,,j] <- data[14*(i-1)+(j+1),]
}
}
ptest <- march.dataset.loadFromDataFrame(datat,covariates=covariates)
setwd("march")
setwd("pkg")
devtools::load_all()
ptest <- march.dataset.loadFromDataFrame(datat,covariates=covariates)
ptest <- march.dataset.loadFromDataFrame(datat,covariates=covariates[,,1:2])
mtd1<-march.mtd.construct(ptest)
mtd1<-march.mtd.construct(ptest,order=2)
covariates
covariates[,,1:2]
?march.mtd.construct
covariates <- array(0,c(23,42,2))
for(j in 1:2){
for(i in 1:23){
covariates[i,,j] <- data[14*(i-1)+(j+1),]
}
}
ptest <- march.dataset.loadFromDataFrame(datat,covariates=covariates)
march.mtd.construct(ptest,order=2)
march.mtd.construct(ptest,order=1)
?march.dataset.loadFromDataFrame()
maxOrder=order,mtdg=FALSE,init="best", deltaStop=0.0001, llStop=0.01, maxIter=0
order=2
maxOrder=order,mtdg=FALSE,init="best", deltaStop=0.0001, llStop=0.01, maxIter=0
mtdg=FALSE
maxOrder=order
deltaStop=0.0001
llStop=0.01
maxIter=0
y<-ptest
order <- march.h.paramAsInteger(order)
if(order<1){
stop('Order should be greater or equal than 1')
}
maxOrder <- march.h.paramAsInteger(maxOrder)
if( order>maxOrder ){
stop("maxOrder should be greater or equal than order")
}
ySave <- y
y <- march.dataset.h.filtrateShortSeq(y,maxOrder+1)
y <- march.dataset.h.cut(y,maxOrder-order)
is_constrained <- TRUE # if FALSE the model is unconstrained and the constraints given by Eq. 4 are activated instead of those given by Eq. 3 (Berchtold, 2001, p. 380)
is_mtdg <- mtdg
init_method <- init
# 1.1. Choose initial values for all parameters
# nt <- BuildArrayNumberOfDataItems(y) This is no longer needed, as y now contains the T field
c <- BuildContingencyTable(y,order)
u <- CalculateTheilU(y,order,c)
init_params <- InitializeParameters(u=u,init_method=init_method,c=c,is_mtdg=is_mtdg,m=y@K,order=order,kcov=y@Kcov,ncov=y@Ncov)
phi <- init_params$phi
q <- init_params$q
S<-init_params$S
c
y@Ncov
n_rows_data <- y@N # number of rows (number of data sequences)
l<-list() # crosstable (rt, Cg in page 385 of Berchtold, 2001)
for (g in 1:order){
c=array(0,c(y@K,y@K))
for (i in 1:n_rows_data){
for (t in 1:(y@T[i]-g)){ # mc_lag is g in Berchtold, 2001
past <- y@y[[i]][t]
present <- y@y[[i]][t+g]
if(length((which(c(past,present)<1) | (which(c(past,present)>y@K))))==0){
c[past,present] <- c[past,present] + y@weights[i]
}
}
}
l[[g]]<-c
}
l
j=1
kcov=y@Kcov[j]
kcov
CT=matrix(0,kcov,y@K)
which(is.na(y@cov))
n=1
for (i in 1:y@T[n]){
row=y@cov[n,i,j]
col=y@y[[n]][i]
CT[row,col]=CT[row,col]+y@weights[i]
}
CT
y@weights
y@weights[i]
i
?march.dataset.loadFromDataFrame()
devtools::load_all()
march.mtd.construct(ptest,order=2)
march.mtd.construct(ptest,order=2,mtdg=TRUE)
model<-march.mtd.construct(ptest,order=2,mtdg=TRUE)
model@S
model@Q
model<-march.mtd.construct(ptest,order=3,mtdg=TRUE)
model@Q
model@Q[1,,]
model@Q[2,,]
model@Q[3,,]
